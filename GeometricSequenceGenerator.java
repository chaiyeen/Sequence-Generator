////////////////////ALL ASSIGNMENTS INCLUDE THIS SECTION /////////////////////
//
//Title:           P7 Sequence Generator
//Files:           ArithmeticSequenceGenerator, DigitProductSequenceGenerator, FibonacciSequenceGenerator, 
//                 GeometricSequenceGenerator, SequenceGeneratorTests
//Course:          CS300, Fall 2018
//
//Author:          Chaiyeen Oh
//Email:           coh26@wisc.edu
//Lecturer's Name: Mouna Ayari Ben Hadj Kacem
//
////////////////////PAIR PROGRAMMERS COMPLETE THIS SECTION ///////////////////
//
//Partner Name:    (name of your pair programming partner)
//Partner Email:   (email address of your programming partner)
//Partner Lecturer's Name: (name of your partner's lecturer)
//
//VERIFY THE FOLLOWING BY PLACING AN X NEXT TO EACH TRUE STATEMENT:
//___ Write-up states that pair programming is allowed for this assignment.
//___ We have both read and understand the course Pair Programming Policy.
//___ We have registered our team prior to the team registration deadline.
//
///////////////////////////// CREDIT OUTSIDE HELP /////////////////////////////
//
//Students who get help from sources other than their partner must fully 
//acknowledge and credit those sources of help here.  Instructors and TAs do 
//not need to be credited here, but tutors, friends, relatives, room mates, 
//strangers, and others do.  If you received no outside help from either type
//of source, then please explicitly indicate NONE.
//
//Persons:         (identify each person and describe their help in detail)
//Online Sources:  Piazza (identify each URL and describe their assistance in detail)
//
/////////////////////////////// 80 COLUMNS WIDE ///////////////////////////////
   import java.util.Iterator;
   /**
    * GeometricSequence determines the next number by multiplying the previous value by a fixed constant.
    *
    */
   public class GeometricSequenceGenerator implements Iterator<Integer> {
     private final int SIZE; // The number of elements in this sequence
     private final int INIT; // The first term in this sequence
     private final int RATIO; // The common ratio for this sequence
     private int next; // The next term in the sequence
     private int generatedCount; // The number of terms generated so far in this sequence
     // It refers also to the order of the next number to be generated by next() method
  
  /**
   * Constructor for GeometricSequenceGenerator
   * @param init
   * @param ratio
   * @param size
   */
  public GeometricSequenceGenerator(int init, int ratio, int size) { 
	  if(init <= 0 || ratio <= 0) 
		  throw new IllegalArgumentException("WARNING: The starting element and the common "
		  		+ "ratio for a geometric progression should be STRICTLY POSITIVE.");
	  if(size < 0)
		  throw new IllegalArgumentException("WARNING: CANNOT create a sequence with size <= zero.");
	  
	  this.SIZE = size;
	  this.INIT = init;
	  this.RATIO = ratio;
	  next = init; // initializes next to the first element in this geometric progression
	  generatedCount = 0;
  }
 
 /**
  * method checking whether generatedCount is larger than the size given
  * @return false if the generatedCount is larger than the value of size
  */
  @Override
  public boolean hasNext() {
      return generatedCount < SIZE;
   // Time Complexity: O(1)
  }
 
  /**
   * method generating the next number of the current value
   * if the generated elements are smaller than the size the user requested,
   * first set the current element to next 
   * increment generated Count
   * and advance next element by multiplying ratio to itself
   * @return current number
   */
  @Override
  public Integer next() {
	// Time Complexity: O(1)
	  if (!hasNext()) // check if the current element has a next element in this sequence
          return null;
      int current = next; // set the current element to next
      generatedCount++; // increment the number of generated elements so far
      next *= RATIO; // set the next element (multiplies the common difference to the current number) 
      return current; // return the current number as the generated one
  }

  /**
   * Getter for the next value
   * @return next
   */
   public int getNext() {
	   return next;
   } 
}